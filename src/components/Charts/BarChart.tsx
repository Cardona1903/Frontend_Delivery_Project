// src/components/Charts/BarChart.tsx
import { useState, useEffect } from 'react';
import ReactApexChart from 'react-apexcharts';
import { ApexOptions } from 'apexcharts';
import { Order } from '../../models/Order';
import { Restaurant } from '../../models/Restaurant';
import { Menu } from '../../models/Menu';

interface BarChartProps {
  orders: Order[];
  restaurants: Restaurant[];
  menus: Menu[];
}

const BarChart = ({ orders, restaurants, menus }: BarChartProps) => {
  const [chartData, setChartData] = useState<{
    series: { name: string; data: number[] }[];
    options: ApexOptions;
  }>({
    series: [
      {
        name: 'Sales',
        data: [],
      },
    ],
    options: {
      chart: {
        type: 'bar',
        height: 350,
        toolbar: {
          show: false,
        },
      },
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          borderRadius: 5,
        },
      },
      dataLabels: {
        enabled: false,
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent'],
      },
      xaxis: {
        categories: [],
      },
      yaxis: {
        title: {
          text: 'Sales ($)',
        },
      },
      fill: {
        opacity: 1,
      },
      tooltip: {
        y: {
          formatter: function (val) {
            return '$ ' + val.toLocaleString();
          },
        },
      },
      colors: ['#3C50E0'],
    },
  });

  useEffect(() => {
    if (!orders || orders.length === 0 || !restaurants || restaurants.length === 0 || !menus || menus.length === 0) return;

    // Calcular ventas por restaurante
    const restaurantSales: { [key: number]: number } = {};
    
    // Inicializar ventas para cada restaurante
    restaurants.forEach(restaurant => {
      if (restaurant.id) {
        restaurantSales[restaurant.id] = 0;
      }
    });
    
    // Calcular ventas por restaurante
    orders.forEach(order => {
      const menu = menus.find(m => m.id === order.menu_id);
      if (menu && menu.restaurant_id) {
        restaurantSales[menu.restaurant_id] += order.total_price;
      }
    });
    
    // Ordenar restaurantes por ventas y tomar los 8 principales
    const topRestaurants = Object.entries(restaurantSales)
      .sort((a, b) => Number(b[1]) - Number(a[1]))
      .slice(0, 8);
    
    // Obtener nombres de restaurantes
    const restaurantNames = topRestaurants.map(([id]) => {
      const restaurant = restaurants.find(r => r.id === Number(id));
      return restaurant ? restaurant.name : `Restaurant ${id}`;
    });
    
    // Obtener valores de ventas
    const salesValues = topRestaurants.map(([, sales]) => Number(sales));
    
    setChartData({
      series: [
        {
          name: 'Sales',
          data: salesValues,
        },
      ],
      options: {
        ...chartData.options,
        xaxis: {
          ...chartData.options.xaxis,
          categories: restaurantNames,
        },
      },
    });
  }, [orders, restaurants, menus]);

  return (
    <div className="h-full">
      <div className="mb-4">
        <h3 className="text-xl font-semibold text-black dark:text-white">
          Top Restaurants by Sales
        </h3>
        <p className="text-sm text-gray-500">Revenue generated by each restaurant</p>
      </div>
      <div>
        <ReactApexChart
          options={chartData.options}
          series={chartData.series}
          type="bar"
          height={350}
        />
      </div>
    </div>
  );
};

export default BarChart;